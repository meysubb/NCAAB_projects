df_2 <- cbind(df[1,],df[-1,])
View(df_2)
View(df)
View(df)
combos<-combn(df$name,2)
combos
combos<-combn(df,2)
View(combos)
?comb
?combn
combos<-unlist(combn(df,2))
combos
combos<-unlist(combn(df,4))
combos
combn(df,4)
?outer
outer(df)
outer(df$name,df$name)
sapply(df,class)
expand.grid(df)
df_2 <- expand.grid(df)
View(df_2)
?expand.grid
expand.grid(height = seq(60, 80, 5), weight = seq(100, 300, 50),
sex = c("Male","Female"))
df_2 <- expand.grid(df,df)
View(df_2)
df_2
rm(df_2)
df_2 <- expand.grid(df,df)
View(df_2)
head(df_2)
split(df,df$name)
names <- split(df,df$name)
names
data <- iris
data <- group_by(.data=data,Species)
data
View(data)
SummaryStatistics <- function(table, field){
table %>%
summarise(count = n(),
min = min(table[[field]], na.rm = T),
mean = mean(table[[field]], na.rm = T, trim=0.05),
median = median(table[[field]], na.rm = T))
}
SummaryStatistics(data, "Sepal.Length")
data %>% summarise(count = n(),
min = min(table[["Sepal.Length"]]))
data %>% summarise(count = n(),
min = min(table[["Sepal.Length"]],na.rm = T))
detah(package:plyr)
detach(package:plyr)
data %>% summarise(min = min(table[["Sepal.Length"]],na.rm = T))
data %>% summarise(min = min(data[["Sepal.Length"]],na.rm = T))
min(data$Sepal.Length)
data$Sepal.Length
SummaryStatistics <- function(table, field){
table %>%
summarise(count = n(),
min = min(field, na.rm = T),
mean = mean(field, na.rm = T, trim=0.05),
median = median(field, na.rm = T))
}
SummaryStatistics(data, "Sepal.Length")
View(SummaryStatistics)
data[["Sepal.Length"]]
data["Sepal.Length"]
SummaryStatistics <- function(table, field){
table %>%
summarise(count = n(),
min = min(table[field], na.rm = T),
mean = mean(table[field], na.rm = T, trim=0.05),
median = median(table[field], na.rm = T))
}
SummaryStatistics(data, "Sepal.Length")
x
SummaryStatistics <- function(table, field){
table %>%
summarise(count = n(),
min = min(table[[field]], na.rm = T),
mean = mean(table[[field]], na.rm = T, trim=0.05),
median = median(table[[field]], na.rm = T))
}
SummaryStatistics(data, "Sepal.Length")
SummaryStatistics <- function(table, field){
summarise(count = n(),
min = min(table[[field]], na.rm = T),
mean = mean(table[[field]], na.rm = T, trim=0.05),
median = median(table[[field]], na.rm = T))
}
SummaryStatistics(data, "Sepal.Length")
SummaryStatistics <- function(table, field){
table %>%
summarise(count = n(),
min = min(table[[field]], na.rm = T),
mean = mean(table[[field]], na.rm = T, trim=0.05),
median = median(table[[field]], na.rm = T))
}
View(data)
data %>% summarise(min)
data %>% summarize(min)
data %>% summarise(mean)
data %>% summarise(mean=mean("Sepal.Length"))
data %>% summarise(mean=mean(Sepal.Length))
SummaryStatistics(data, Sepal.Length)
SummaryStatistics <- function(table, field){
table %>%
summarise(count = n(),
min = min(field, na.rm = T),
mean = mean(field, na.rm = T, trim=0.05),
median = median(field, na.rm = T))
}
SummaryStatistics(data, Sepal.Length)
SummaryStatistics(data, "Sepal.Length")
data %>% summarise(
min = min(Sepal.Length),
mean=mean(Sepal.Length),
median = median(Sepal.Length))
data %>% summarise(
count = n(),
min = min(Sepal.Length),
mean=mean(Sepal.Length),
median = median(Sepal.Length))
data %>% summarise(
count = n(),
min = min(Sepal.Length, na.rm = T),
mean=mean(Sepal.Length, na.rm = T, trim=0.05),
median = median(Sepal.Length,, na.rm = T))
data %>% summarise(
count = n(),
min = min(Sepal.Length, na.rm = T),
mean=mean(Sepal.Length, na.rm = T, trim=0.05),
median = median(Sepal.Length,, na.rm = T))
data %>% summarise(
count = n(),
min = min(Sepal.Length, na.rm = T),
mean=mean(Sepal.Length, na.rm = T, trim=0.05),
median = median(Sepal.Length,na.rm = T))
SummaryStatistics <- function(table, field){
summarise(count = n(),
min = min(table[[field]], na.rm = T),
mean = mean(table[[field]], na.rm = T, trim=0.05),
median = median(table[[field]], na.rm = T))
}
SummaryStatistics(data, "Sepal.Length")
SummaryStatistics <- function(table, field){
summarise(data,count = n(),
min = min(table[[field]], na.rm = T),
mean = mean(table[[field]], na.rm = T, trim=0.05),
median = median(table[[field]], na.rm = T))
}
SummaryStatistics(data, "Sepal.Length")
SummaryStatistics <- function(table, field){
summarise(data,count = n(),
min = min(field, na.rm = T),
mean = mean(field, na.rm = T, trim=0.05),
median = median(field, na.rm = T))
}
SummaryStatistics(data, "Sepal.Length")
SummaryStatistics(data, Sepal.Length)
View(data)
SummaryStatistics(data, "Sepal.Length")
library(tidyr)
?crossing
data <- iris
SummaryStatistics <- function(table, field,group){
data %>% group_by(group) %>%
summarise(count = n(),
min = min(field, na.rm = T),
mean = mean(field, na.rm = T, trim=0.05),
median = median(field, na.rm = T))
}
SummaryStatistics(data, "Sepal.Length","Species")
SummaryStatistics(data, "Sepal.Length",Species)
summary(data())
summary(data
)
data
data <- group_by(.data=data,Species)
summary(data)
data()
data
SummaryStatistics <- function(table, field){
summarise(data,count = n(),
min = min(lazyeval::lazy(field), na.rm = T),
mean = mean(lazyeval::lazy(field), na.rm = T, trim=0.05),
median = median(lazyeval::lazy(field), na.rm = T))
}
SummaryStatistics(data, Sepal.Length)
lazyeval::lazy(Sepal.Length)
names(data)
View(data)
SummaryStatistics(data, Sepal.Length)
SummaryStatistics <- function(table, field){
summarise(data,count = n(),
min = min(.dots = lazyeval::lazy(field), na.rm = T),
mean = mean(.dots = lazyeval::lazy(field), na.rm = T, trim=0.05),
median = median(.dots = lazyeval::lazy(field), na.rm = T))
}
SummaryStatistics(data, Sepal.Length)
SummaryStatistics <- function(table, field){
summarise_(data,count = n(),
min = min(.dots = lazyeval::lazy(field), na.rm = T),
mean = mean(.dots = lazyeval::lazy(field), na.rm = T, trim=0.05),
median = median(.dots = lazyeval::lazy(field), na.rm = T))
}
SummaryStatistics(data, Sepal.Length)
SummaryStatistics <- function(table, field){
summarise_(data,count = n,
min = min(.dots = lazyeval::lazy(field), na.rm = T),
mean = mean(.dots = lazyeval::lazy(field), na.rm = T, trim=0.05),
median = median(.dots = lazyeval::lazy(field), na.rm = T))
}
SummaryStatistics(data, Sepal.Length)
SummaryStatistics <- function(table, field){
summarise_(data,
min = min(.dots = lazyeval::lazy(field), na.rm = T),
mean = mean(.dots = lazyeval::lazy(field), na.rm = T, trim=0.05),
median = median(.dots = lazyeval::lazy(field), na.rm = T))
}
SummaryStatistics(data, Sepal.Length)
SummaryStatistics <- function(table, field){
summarise_(data,
min = min(lazyeval::lazy(field), na.rm = T),
mean = mean(lazyeval::lazy(field), na.rm = T, trim=0.05),
median = median(lazyeval::lazy(field), na.rm = T))
}
SummaryStatistics(data, Sepal.Length)
SummaryStatistics <- function(table, field){
summarise_(data,
min = ~ min(lazyeval::lazy(field), na.rm = T),
mean = ~mean(lazyeval::lazy(field), na.rm = T, trim=0.05),
median = ~ median(lazyeval::lazy(field), na.rm = T))
}
SummaryStatistics(data, Sepal.Length)
SummaryStatistics(data, "Sepal.Length")
SummaryStatistics <- function(table, field){
summarise_(data,
min = ~ min(field, na.rm = T),
mean = ~mean(field, na.rm = T, trim=0.05),
median = ~ median(field, na.rm = T))
}
SummaryStatistics(data, "Sepal.Length")
SummaryStatistics <- function(table, field){
summarise_(data,
min = ~ min(lazyeval:lazy(field), na.rm = T),
mean = ~mean(field, na.rm = T, trim=0.05),
median = ~ median(field, na.rm = T))
}
SummaryStatistics(data, "Sepal.Length")
SummaryStatistics <- function(table, field){
summarise_(data,
min = ~ min(lazyeval::lazy(field), na.rm = T),
mean = ~mean(field, na.rm = T, trim=0.05),
median = ~ median(field, na.rm = T))
}
SummaryStatistics(data, "Sepal.Length")
SummaryStatistics(data, Sepal.Length)
SummaryStatistics <- function(table, field){
summarise_(data,
min = ~ min(field), na.rm = T),
mean = ~mean(field, na.rm = T, trim=0.05),
median = ~ median(field, na.rm = T))
}
SummaryStatistics(data, Sepal.Length)
SummaryStatistics <- function(table, field){
summarise_(data,
min = ~ min(field, na.rm = T),
mean = ~mean(field, na.rm = T, trim=0.05),
median = ~ median(field, na.rm = T))
}
SummaryStatistics(data, Sepal.Length)
SummaryStatistics(data, "Sepal.Length")
SummaryStatistics <- function(table, field){
summarise_(data,count = n(),
min = ~ min(field, na.rm = T),
mean = ~mean(field, na.rm = T, trim=0.05),
median = ~ median(field, na.rm = T))
SummaryStatistics <- function(table, field){
summarise_(data,count = n(),
min = ~ min(field, na.rm = T),
mean = ~mean(field, na.rm = T, trim=0.05),
median = ~ median(field, na.rm = T))
}
SummaryStatistics(data, "Sepal.Length")
SummaryStatistics <- function(table, field){
summarise_(data,count = n(),
min = ~ min(field, na.rm = T),
mean = ~mean(field, na.rm = T, trim=0.05),
median = ~ median(field, na.rm = T))
}
SummaryStatistics(data, "Sepal.Length")
SummaryStatistics <- function(table, field){
summarise(data,count = n(),
min = ~ min(field, na.rm = T),
mean = ~mean(field, na.rm = T, trim=0.05),
median = ~ median(field, na.rm = T))
}
SummaryStatistics(data, "Sepal.Length")
SummaryStatistics(data, Sepal.Length)
d<- data.frame(Period =c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"),
SalesForecasts = c(100, 100, 200, 100, 300, 300, 100, 100, 200, 300,100, 100, 500, 500, 1000, 500, 1500, 1500, 500, 500, 1000, 1500, 500, 500))
View(d)
d[Period,]
d["Period",]
d[,"Period"]
d[["Period"]]
data("meuse.grid")
library(reshape2)
library(data.table)
library(dplyr)
library(magrittr)
library(ggplot2)
library(scales)
library(gstat)
library(DescTools)
library(sp)
install.packages("gstat")
library(reshape2)
library(data.table)
library(dplyr)
library(magrittr)
library(ggplot2)
library(scales)
library(gstat)
library(DescTools)
library(sp)
install.packages("DescTools")
library(DescTools)
data("meuse.grid")
View(meuse.grid)
data("euro")
library(DT)
install.packages
install.packages("DT")
library(DT)
DT::datatable(datasets::euro.cross)
DT::datatable(datasets::euro.cross)
list=c()
fours=rep(4,100)
for(i in seq(10)){
# split into chunks: i=1, take fours[1:10]; i=2, fours[11:20]...
# when i=10, should return fours[91:100]
chunks=fours[1+10*(i-1):10*i]
# add smaller lists of four back into bigger list
list=c(list,chunks)
}
list
fours
split(fours)
split(fours,10)
library(ggplot2)
cut(fours,10)
split(fours, sort(fours%%10))
split(fours, cut(fours, 10, labels = FALSE))
cut(fours, 10, labels = FALSE)
?cut
x <- seq_along(fours)
d1 <- split(fours, ceiling(x/10))
d1
length(d1)
l <- split(fours, cut(fours, 10, labels = FALSE))
dput(l)
l
dput(list)
dput(d1)
d1
length(d1)
mat <- matrix(fours, byrow = T, ncol = 10)
mat
split(mat, rep(1:ncol(mat), each = nrow(mat)))
x
ceiling(x/10)
devtools::install_github('zachmayer/kaggleNCAA')
set.seed(1)
library('kaggleNCAA')
data(sample_submission)
View(sample_submission)
f <- tempfile()
write.csv(sample_submission, f, row.names=F)
dat <- parseBracket(f)
View(dat)
unlink(f)
?unlink
sim <- simTourney(dat, 100, year=2017, progress=TRUE)
View(sim)
bracket <- extractBracket(sim)
View(bracket)
printableBracket(bracket)
bracket <- walkTourney(dat, year=2017)
?walkTourney
printableBracket(bracket)
agg.team <- readRDS(file="data/agg_team.RDS")
setwd("~/Documents/github/Data_Cleaning_Optimization")
agg.team <- readRDS(file="data/agg_team.RDS")
setwd("~/Documents/github/NCAAB_shiny_app/2017/Shiny_App/2017_MarchMadness")
colnames(agg.team)[c(82:83,85)] <- paste0("team_",colnames(agg.team)[c(82:83,85)])
agg.team <- readRDS(file="data/agg_team.RDS")
View(agg.team)
agg.player<- readRDS(file="data/agg_player.RDS")
ind.team <- readRDS(file="data/ind_team.RDS")
ind.player <- readRDS(file="data/ind_player.RDS")
colnames(agg.team)
getwd()
setwd("~/Documents/github/NCAAB_shiny_app/2017/Advanced Metrics")
options(stringsAsFactors = FALSE)
options(digits=8)
year_id <- "12480"
library(dplyr)
conf_team_dat <- readRDS("conferences/conf_team.RDS")
agg.team <- readRDS("data/agg_team.RDS")
agg.team <- inner_join(agg.team,conf_team_dat)
ind.team <- readRDS("data/ind_team.RDS")
ind.team <- ind.team %>% mutate(
possessions = round(team_fga + 0.475 * team_fta - team_offreb + team_to),
points_per_poss = team_pts/(team_fga + 0.475 * team_fta) * (team_fga + 0.475 * team_fta)/possessions,
d_points_per_poss = opp_pts/(opp_fga + 0.475 * opp_fta) * (opp_fga + 0.475 * opp_fta)/possessions,
ppp_diff = points_per_poss - d_points_per_poss,
ORTG = 100 * (team_pts)/possessions,
DRTG = 100 * (opp_pts/possessions)
)
agg.player <- readRDS("data/agg_player.RDS")
ind.player <- readRDS("data/ind_player.RDS")
ind.player$team_id <- gsub("12480","",ind.player$team_id)
detach("package:reshape", unload=TRUE)
tm_mins_calc <- ind.player %>% group_by(team_id,game) %>%
mutate(tm_mins = sum(minutes,na.rm = TRUE)) %>% select(team_id,game,tm_mins) %>% distinct(game, .keep_all = TRUE) %>% rename(game_id = game)
ind.team <- inner_join(ind.team,tm_mins_calc)
summary <- ind.team %>% group_by(team_name) %>%
summarize(possessions = sum(possessions),
o_ppp = mean(points_per_poss),
d_ppp = mean(d_points_per_poss),
ORTG_sum = mean(ORTG),
DRTG_sum = mean(DRTG))
agg.team <- inner_join(agg.team,summary)
agg.team <- agg.team %>% mutate(
diff_ppp = o_ppp - d_ppp,
ts_pct = 0.5 * team_pts/(team_fga + 0.475 * team_fta),
efg_pct = (team_fgm + 0.5 * team_three_fgm) / team_fga,
pyth_win = team_pts^14 / (team_pts^14 + opp_team_pts^14),
three_par = team_three_fga/team_fga
)
agg.player <- agg.player %>% mutate(
ts_pct = (0.5 * pts)/(fga + 0.475 * fta),
efg_pct = (fgm + 0.5 * three_fgm)/fga,
three_par = three_fga/fga
)
team_dat <- ind.team %>% select(game_id,team_fgm,team_fga,team_fta,team_to,team_name,team_totreb,opp_totreb,tm_mins,opp_fga,opp_three_fga) %>% rename(game = game_id)
player_dat <- ind.player %>% select(minutes,game,player_name,team_name,totreb,ast,fgm,fga,fta,blk,to)
ind.player_adv <- inner_join(player_dat,team_dat) %>% mutate(fgm = as.numeric(fgm))
ind.player_adv[is.na(ind.player_adv)] <- 0
ind.player_adv <- ind.player_adv %>% mutate(
reb_rate = 100 * ((totreb * tm_mins/5)/ (minutes * (team_totreb + opp_totreb))),
ast_rate = 100 * (ast / (((minutes/ (tm_mins/5)) * team_fgm) - fgm)),
blk_rate = 100 * (blk * (tm_mins/5)) / (minutes * (opp_fga - opp_three_fga)),
usg_rate = 100 * ( ((fga + 0.475 * fta + to) * (tm_mins/5)) / (minutes * (team_fga + 0.475 * team_fta + team_to)))
#  to_rate =  100 * (to / (fga + 0.475 * fta + to))
)
ind.player_adv[is.na(ind.player_adv)] <- 0
ind.player_adv[ind.player_adv$usg_rate == Inf,] <- 0
agg.player_adv <- ind.player_adv %>% group_by(team_name,player_name) %>% summarize(
reb_rate = mean(reb_rate,na.rm = TRUE),
ast_rate = mean(ast_rate,na.rm = TRUE),
blk_rate = mean(blk_rate,na.rm = TRUE),
usg_rate = mean(usg_rate,na.rm = TRUE)
#  to_rate = mean(to_rate,na.rm = TRUE)
)
agg.player <- inner_join(agg.player,agg.player_adv)
round_df <- function(x, digits) {
# round all numeric variables
# x: data frame
# digits: number of digits to round
numeric_columns <- sapply(x, class) == 'numeric'
x[numeric_columns] <-  round(x[numeric_columns], digits)
x
}
colnames(agg.team)[c(82:83,85)] <- paste0("team_",colnames(agg.team)[c(82:83,85)])
agg.player <- round_df(agg.player,2)
ind.team <- round_df(ind.team,2)
ind.player$fgm <- as.numeric(ind.player$fgm)
ind.player[,7:22][is.na(ind.player[,7:22])] <- 0
ind.player <- round_df(ind.player,2)
getwd()
saveRDS(agg.team,file="agg_team.RDS")
saveRDS(agg.player,file="agg_player.RDS")
saveRDS(ind.team,file="ind_team.RDS")
saveRDS(ind.player,file="ind_player.RDS")
shiny::runApp('~/Documents/github/NCAAB_shiny_app/2017/Shiny_App/2017_MarchMadness')
runApp('~/Documents/github/NCAAB_shiny_app/2017/Shiny_App/2017_MarchMadness')
colnames(ind.team)
runApp('~/Documents/github/NCAAB_shiny_app/2017/Shiny_App/2017_MarchMadness')
runApp('~/Documents/github/NCAAB_shiny_app/2017/Shiny_App/2017_MarchMadness')
colnames(ind.team)
runApp('~/Documents/github/NCAAB_shiny_app/2017/Shiny_App/2017_MarchMadness')
runApp('~/Documents/github/NCAAB_shiny_app/2017/Shiny_App/2017_MarchMadness')
library(rsconnect)
rsconnect::setAccountInfo(name='meysubb',
token='737999C5794BAAE73D7903EBEF2BED68',
secret='<SECRET>')
library(rsconnect)
getAccountInfo()
rsconnect::setAccountInfo(name='meysubb',
token='737999C5794BAAE73D7903EBEF2BED68',
secret='<SECRET>')
deployApp()
getwd()
setwd("~/Documents/github/NCAAB_shiny_app/2017/Shiny_App/2017_MarchMadness")
rsconnect::setAccountInfo(name='meysubb',
token='737999C5794BAAE73D7903EBEF2BED68',
secret='<SECRET>')
deployApp()
